~~LANG:EN@enman:new-features~~

===== Nouveautés apportées par la version 1.7 =====

Jelix 1.7 apporte beaucoup de nouveautés. Consultez les [[installation/migration|instructions de migrations]]
qui sont bien moins impressionnantes que la liste des nouveautés : les scripts
de mises à jour s'occupent de pas mal de choses.

Jelix 1.7 nécessite dorénavant PHP 5.6 minimum et est compatible avec PHP 7.

==== Intégration avec Composer ====

    * La bibliothèque Jelix [[https://packagist.org/packages/jelix/jelix|est maintenant installable]]
      avec Composer.
    * Des modules et plugins ont été externalisés et disponibles séparément via
      Composer. Certains restent toutefois inclus dans le paquet standard de
      Jelix.
    * Un projet basé sur Jelix peut-être créé avec le paquet
      [[https://packagist.org/packages/jelix/jelix-skeleton-app|jelix/jelix-skeleton-app]]
      installable via Composer
    * Les paramètres de configuration @@modulesPath@@ et @@pluginsPath@@ ne sont
      plus pris en charge, et remplacés par une nouvelle API à appeler dans le
      fichier @@application.init.php@@ : @@jApp::declareModulesDir()@@,
      @@jApp::declarePluginsDir()@@, @@jApp::declareModuleDir()@@. Il est aussi
      possible de déclarer les chemins de repertoire de modules et plugins, via
      le fichier composer.json de l'application et des paquets contenant des
      modules.

==== Nouveau répertoire @@F@app/@@ ====

Une application contient un nouveau repertoire @@F@app/@@ dans lequel ont été
déplacé certains fichiers de @@F@var/@@ ainsi que @@F@responses/@@.

    * Nouveau répertoire @@F@app/config@@ dans les applications, et déplacement des fichiers
      non lié à l'environnement, de   vers  @@F@app/config@@ :  @@F@mainconfig.ini.php@@,
      @@F@config.ini.php@@,  @@F@urls.xml@@, les fichiers de configuration des plugins, de soap...
      On a ainsi d'une part les fichiers qui ne  dépendent pas de l'environnement
      d'execution dans  @@F@app/config@@, et d'autre part ceux qui dépendent du serveur
      dans  @@F@var/config@@ (localconfig.ini.php, profiles.ini.php...).
    * Les fichiers de configuration dédiés à un point d'entrée peuvent
      être à la fois dans @@app/config/@@ et @@var/config/@@.
    * Il faut maintenant mettre les overloads, themes et locales
      dans le répertoire app/. Les répertoires var/overloads, var/themes et
      var/locales étant dorénavant déstinés uniquement à leurs ressources
      qui seraient créés dynamiquement pendant la vie de l'application.
    * Déplacement du répertoire @@F@responses/@@ vers @@F@app/responses@@

==== Refonte du moteur d'URL ====

Le nouveau moteur est en quelque sorte une fusion des anciens
plugins 'basic_significant' et 'significant', avec des améliorations pour
faciliter la configuration des urls. Il n'y a plus de système de plugins
('simple', 'basic_significant', 'significant' n'existent plus).

    * Les paramètres d'url "module" et "action" ne sont plus pris en compte (mais
      peuvent toujours être récupérés à partir de vos contrôleurs, même si cet
      usage est obsolète)
    * les paramètres @@startModule@@ et @@startAction@@ dans la configuration
      du point d'entrée n'existent plus
    * Les paramètres de configuration suivant de la section urlengine n'existent plus :
      @@engine@@, @@defaultEntrypoint@@, @@simple_urlengine_https@@
    * Les sections de configurations suivantes n'existent plus :
      @@simple_urlengine_entrypoints@@, @@basic_significant_urlengine_entrypoints@@
    * Une API permet aux scripts d'installation de déclarer facilement les urls
      (et donc de modifier urls.xml) : @@jInstallerGlobalSetup::getUrlModifier()@@, @@jInstallerGlobalSetup::declareNewEntryPoint()@@
    * Dans le fichier urls.xml
       * Il est possible d'indiquer un pathinfo sur un @@<url module="..">@@
       * Il est obligatoire d'indiquer une action pour l'url "/", ce qui remplace
         la disparition de @@startModule@@ et @@startAction@@
       * Un pathinfo absent ou vide dans un @@<url>@@ équivaut à "/"
       * Une meilleure vérification des mauvaises utilisations du XML. Par exemple
         une erreur est levée si il n'y a pas d'attribut "module".
       * Il est possible de déclarer une url pour un contrôleur, sans avoir
         à le faire pour chacune de ses méthodes

L'outil de migration s'occupe d'effectuer la plupart de ces changements.

==== Amélioration de l'installateur ====

Les API pour les scripts d'installation ont été retravaillé, de manière
à séparer ce qui est spécifique à un point d'entrée, et ce qui est spécifique
à l'application en général. En particulier ce qui concerne les fichiers de
configuration. Pour cela, des nouvelles classes @@jInstallerModuleé@@ et
@@jInstallerEntryPoint2@@ ont fait leur apparition, et @@jInstallerModule@@
et @@jInstallerEntryPoint@@ sont dépréciées (bien qu'encore utilisable
pour cette version).

Il est possible aussi de désinstaller un module avec une nouvelle
commande @@php cmd.php module:uninstall@@. L'objet d'installation du module peut
implémenter la méthode @@uninstallEntrypoint()@@ pour supprimer proprement des
paramètres de la configuration, supprimer des fichiers qui auraient été créé par
le module etc.

Autre nouveauté : l'installateur fait maintenant une sauvegarde du fichier
installer.ini.php. Si l'installation bug, cela permet de restaurer plus facilement
l'installation d'origine.

==== Nouveau Système d'assets : webassets ====

Une nouvelle manière de déclarer les assets (js et css) dans le HTML fait son apparition.
Dans la configuration, vous pouvez indiquer des listes de scripts js et css,
regroupés en groupe.

Ainsi, plutôt que de déclarer "en dur" dans le code de vos contrôleurs, les scripts
js et les feuilles css à utiliser, vous y indiquer un nom de groupe d'assets.
Cela permet de modifier facilement les assets à charger, et d'éviter à modifier
les modules. Très utile pour modifier les assets d'un module tiers (en particulier
les assets des composants Jelix !), ou pour mettre à jour des bibliothèques JS.
Ou encore pour spécifier des listes de fichiers JS/CSS en fonction de
l'environnement (debug vs production).

==== jDb et jDao ====

  * **Amélioration de la prise en charge des requêtes préparées**
    * bindValue() et bindParam() a maintenant la même signature que PDO
    * sqlite3 : support des requêtes préparées
    * pgsql : support des paramètres nommés pour les requêtes préparées
    * mysqli : correction sur la prise en charge des requêtes préparées et
      support des paramètres nommés
  * jDb schema: amélioration de la prise en charge de sqlite3: ajout de colonne, creation d'index, de clé primaire
  * jDb/mysql : correction sur le démarrage d'une transaction, pour ne plus utiliser l'ancien mot-clé SQL pour cette fonctionnalité
  * jDao : a maintenant son propre système de plugin "daobuilder". Les classes
    des plugins de jDb qui lui étaient dédiés sont maintenant des plugins.

  * jProfiles est maintenant extensible par des plugins :
     * le contenu du fichier profiles.ini.php est optimisé et stocké en cache
     * ces plugins peuvent traiter les
       profiles qu'ils prennent en charge avant la mise en cache du fichier
       profiles.ini.php. (plugin : @@profiles/<type>/<type>.profiles.php@@
       classe: @@<type>ProfilesCompiler@@).
     * un plugin pour jdb est fourni, permettant à jDb de traiter plus
       rapidement l'ouverture d'une connexion.

==== jForms ====

    * jForms ne stocke plus les données des instances dans la session
      mais dans un cache avec jCache, permettant de charger les sessions
      beaucoup plus rapidement. Par défaut le cache se fait dans des fichiers,
      mais vous pouvez utiliser Redis ou autre.
    * Pour le contrôle @@choice@@, un item de choix peut maintenant avoir une valeur vide.
    * Un contrôle @@choice@@ peut maintenant être utilisé dans un @@group@@.
    * Le javascript généré pour un formulaire n'est plus intégré en ligne dans le HTML
      généré, mais chargé en tant que script externe. Utile pour les
      [[rêgles CSP|https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP]].
    * Tous les composants de jForms, comme les widgets wikieditor et htmleditor,
      utilisent le nouveau système d'assets de Jelix.
    * En js, vous pouvez forcer le rechargement d'une listbox dynamique
     avec la méthode @@updateDynamicList()@@ de l'objet JS jforms.

==== Autres nouveautés ====

  * La propriété @@_lang@@ de @@jResponseHtml@@ ne contient maintenant
    que le code langue (XX), et non la locale complète (XX_YY), que l'on retrouve
    dans une nouvelle propriété @@_locale@@.
  * jRequest parse maintenant automatiquement les contenus JSON indiqués dans
    les requêtes HTTP (c'était une fonctionnalité introduite dans Jelix 1.6.12
    mais désactivé par défaut).
  * Nouvelle méthode @@M@jCoordinator::execOriginalAction()@@ pour
    savoir si l'action courante est une redirection interne ou pas.
  * contrôleur CRUD : la liste des enregistrements peut être triée par colonne
  * jCmdLineRequest : il faut maintenant donner le module et l'action
    au constructeur quand le script est dédié à une action précise.
  * Dans les applications nouvellement créés, le répertoire temp est maintenant
    par défaut dans le répertoire de l'application.

  * @@jApp@@ :
    * nouvelle méthode @@jApp::urlBasePath()@@ qui permet de récupérer le basePath,
      donc un équivalent de @@jApp::config()->urlengine['basePath']@@.
    * nouvelle méthode @@M@jApp::version()@@
    * jApp utilise maintenant en interne une nouvelle classe jAppInstance pour faciliter le changement de contexte.
    * nouvelle méthode @@M@jAppInstance::includePlugin()@@ pour charger un plugin sans l'instancier
  * nouvel objet @@C@jFramework@@ permettant d'accéder à des informations sur le
    framework (version...)

  * Les assets des modules récupérés par le contrôleur www du module jelix
    sont maintenant mis en cache dans le navigateur

  * scripts Jelix-scripts (cmd.php) : toutes les commandes d'aides à la génération
    d'une application et de ses composants sont maintenant basées sur le
    composant Symfony Console. Les noms et paramètres des commandes ont donc
    changé.
  * Jelix-scripts createapp:
     * createapp.php a été déplacé dans un répertoire bin sous le nom create-jelix-app.php
       et est basé sur Symfony Console.
     * nouvelle option @@--modulename@@ pour indiquer le nom du
       module principal.

  * jAuth: persistant_crypt_key a été renommé en persistant_encryption_key
    et utilise une fonction de création de clé plus forte.
  * jauthdb_admin : la liste des utilisateurs peut être filtrée et triée
  * jacl2db_admin : la liste des utilisateurs peut être filtrée

  * jLocale peut maintenant chercher une clé manquante dans une locale similaire à la locale courante

  * Zones : organisation du cache en sous-répertoires pour éviter un trop grand nombre de fichier
    dans un même répertoire.
  * correction @@jIniFileModifier@@ : il n'y a plus de ligne vide ajoutée à la fin du fichier à chaque sauvegarde
  * @@jFile@@ repose maintenant sur le paquet Composer "jelix/file-utilities"
    qui propose des méthodes supplémentaires.
  * @@jFile::getMimeTypeFromFilename()@@ : support d'une liste de type mime
    définie par le développeur, dans une section @@[mimeTypes]@@ de la
    configuration.
  * Correction dans jDatetime sur le format RCF822 et les timezones

==== Les modules et plugins externalisés ====

À l'instar du module jtcpdf dans les versions précédentes, des modules et plugins ne sont
plus fournis avec Jelix, mais disponibles séparément, en tant que paquets Composer et archives
téléchargeables classiquement.

Voici la liste de ces modules et plugins :

  * Le module jtcpdf : [[https://packagist.org/packages/jelix/tcpdf-module|jelix/tcpdf-module]].
  * Le plugin Minify pour les réponses HTML (maintenant dans un module) : [[https://packagist.org/packages/jelix/minify-module|jelix/minify-module]].
  * Le plugin Redis pour jKVDb et jCache reposant sur la classe PhpRedis : [[https://packagist.org/packages/jelix/php-redis-plugin|jelix/php-redis-plugin]].
  * Le module jsitemap : [[https://packagist.org/packages/jelix/sitemap-module|jelix/sitemap-module]], contenant
    l'objet réponse pour générer un sitemap.
  * [[https://packagist.org/packages/jelix/diff-plugin|Le plugin diff pour jTpl]]


À noter que d'autres composants, modules et plugins sont aussi maintenant chacun dans
leurs propres dépôts même si ils sont fournis avec Jelix en standard. Il s'agit de :

  * [[https://packagist.org/packages/jelix/fakeserverconf|FakeServerConf]]
  * [[https://packagist.org/packages/jelix/soap-server-module|le module jSoap]]
  * [[https://packagist.org/packages/jelix/feeds-module|un nouveau module jFeeds]] comportant les classes
    et réponse pour générer des fils RSS et ATOM
  * [[https://packagist.org/packages/jelix/castor|la version standalone de jTpl, Castor]]
  * [[https://packagist.org/packages/jelix/inifile|IniModifier et MultiIniModifier]], classes de
    modification de fichiers ini (anciennement jIniFileModifier et jIniMultiFilesModifier)
  * [[https://packagist.org/packages/jelix/wikirenderer-plugin|La class jWiki et WikiRenderer]]

==== Les modules, plugins et fonctionnalités supprimés ou dépréciés ====

  * il n'y a plus les fichiers de locales en_EN. configurez plutôt votre
    application pour utiliser en_US ou en_GB.
  * le plugin memcache22 pour jCache a été supprimé
  * La méthode @@jInstallerBase::declarePluginsPath()@@ a été supprimé.
  * les classes @@jIniFile@@, @@jIniFileModifier@@, @@jIniMultiFilesModifier@@ ont changés de nom en
    respectivement Jelix\IniFile\Util, Jelix\IniFile\IniModifier, Jelix\IniFile\MultiIniModifier.
    Mais il est encore possible d'utiliser les anciens noms (jusqu'à la prochaine version).
  * La méthode @@jApp::configPath()@@ est dépréciée au profit de @@jApp::varConfigPath()@@
  * La classe @@jJson@@ a été supprimée. Utilisez les fonctions json de PHP directement.
  * La classe @@jCrypt@@ a été supprimée, l'API mcrypt étant dépréciée par PHP
    et n'était plus maintenue depuis longtemps. Utilisez d'autres bibliothèques
    de chiffrements (le paquet defuse/php-encryption par exemple).
  * La classe @@jVersionComparator@@ a été remplacée par la classe
    @@Jelix\Version\VersionComparator@@ d'un nouveau paquet "jelix/version"
  * project.xml : @@<directories>@@ n'est plus pris en charge
  * le plugin zendframework a été supprimé
  * jDao : l'attribut "driver" sur la balise de condition "binary_op" est
    déprécié et remplacé par un attribut "dbtype"

  * Le module junittests et Simpletests ont été supprimé. Ils sont disponibles
    séparement pour ceux qui n'auraient pas encore migré leur tests vers PHPUnit.
  * idem pour les plugins mysql et sqlite : en effet, les API PHP qu'ils utilisent sont dépréciées
    dans PHP. Ils sont disponibles séparément. Il est toutefois préférable d'utiliser
    respectivement les plugins mysqli et sqlite3, toujours disponibles dans la
    distribution standard.
  * La classe @@jHttp@@ est dépréciée et installable séparément, ainsi que les
    quelques fichiers de la bibliothèque clearbricks qui l'accompagnait.
  * les fichiers json.js, json2.js et xul/jsonrpc.js ont été supprimé, les
    navigateurs récents supportant JSON.


==== Pour les contributeurs ====

  * La configuration Vagrant pour les contributeurs est maintenant située dans testapp
  * Il n'y a plus besoin de faire un "build" des sources de Jelix pour contribuer à Jelix
    et lancer les tests.
  * FakeServerConf, Minify, PHPMailer sont maintenant installés via Composer
  * Dans testapp, une application "adminapp" est disponible pour tester les modules d'admin.

==== Contributeurs à Jelix 1.7 ====

  * Laurent Jouanneau (la plupart des évolutions)
  * Brunto (crud controller)

