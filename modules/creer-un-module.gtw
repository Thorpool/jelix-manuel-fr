~~LANG:EN@enman:modules/creating-a-module~~

Un module est un répertoire dans lequel il y a un certain nombre de classes
et de fichiers qui concernent en général un domain fonctionnel précis.
Ces fichiers sont organisés selon un arborescence prédéfinie, comme indiqué
plus loin.

===== Créer un module =====

Le principe : il suffit de créer un répertoire dans un dépôt de module,
avec un nom précis, et d'y mettre les contrôleurs, autres composants et tout ce
qu'il faut dans leurs sous-répertoires respectifs.

Le "dépôt" de module doit avoir au préalable été déclaré. Voir la section sur
[[/configuration/repertoires-de-modules|les répertoires de modules]].

Le plus simple pour créer un module est d'utiliser la commande @@c@module:create@@.
Dans votre application :

<code bash>
php dev.php module:create monmodule
</code>

Cela vous crée un module de nom "monmodule" dans le répertoire @@F@modules/@@ de
l'application, ainsi que l'arborescence classique d'un module et un contrôleur
par défaut.

**Important** : Le nom des modules est repris dans certaines classes générées
automatiquement par Jelix, aussi ne peut-il comporter que des caractères
autorisés par PHP pour les noms de classes : lettres minuscules, majuscules, non
accentuées, les chiffres et le caractère @@_@@.

Par défaut, le module est créé dans le répertoire @@F@modules/@@ de
l'application, mais si vous voulez le créer dans un autre dépôt de module
déclaré avec jApp, vous pouvez indiquer son chemin (relatif ou absolu) après le
nom du module.

Cet exemple crée le module supermodule dans le répertoire lib/shared-modules/ 

<code bash>
php dev.php module:create supermodule ../lib/shared-modules/
</code>

Voir l'aide de la commande @@c@module:create@@ (avec @@--help@@) pour connaître
d'autres options.

===== Indiquer le numéro de version et les dépendances =====

Après avoir créer le module, vous devez vérifier que le numéro de version
initial est bon pour vous. Par défaut, c'est 0.1pre. Vous devez aussi
éventuellement indiquer les dépendances. Ces deux choses sont très importantes
pour le système d'installation de jelix.

Vous pouvez indiquer le numéro de version à la commande @@module:create@@, grâce
à l'option @@--ver@@ :

<code bash>
php dev.php module:create --ver 1.0 supermodule
</code>

Vous pouvez aussi le modifier directement dans le fichier @@F@module.xml@@ de
votre module.

Vous pouvez enfin définir les dépendances de votre module. Les dépendances sont
les modules nécessaires à l'exécution du nouveau module. Dans l'élément
@@E@<dependencies>@@ dans le fichier @@F@module.xml@@, ajouter autant de balises
@@E@<module>@@ que de modules nécessaires.

<code xml>
   <dependencies>
     <jelix minversion="1.6" maxversion="1.6.*" />
     <module name="jauth" minversion="1.2" />
     <module name="anOtherModule" minversion="1.0" maxversion="1.4.*" />
   </dependencies>
</code>

Les attributs @@A@minversion@@ et @@A@maxversion@@ sont facultatifs.


Pour plus de détails sur le contenu de module.xml et sur les dépendances,
[[/configuration/fichiers-configuration#module.xml|lisez le chapitre correspondant]].


===== Arborescence d'un module =====

Un module est un répertoire contenant au moins un fichier [[/configuration/fichiers-configuration#module.xml|module.xml]],
qui contient certaines informations à propos de ce module : version, dépendances...

Et vous avez un certain nombre de répertoires, en fonction de ce que fourni le module, et
contenant chacun des fichiers spécifiques. Voici les répertoires possibles :

; @@F@controllers/@@ : les classes utilisées lorsque les URLs correspondantes sont appellées
; @@F@classes/@@ : classes métiers, utilitaires, listener pour les évènements...
; @@F@templates/@@ : fichier des contenus à envoyer au navigateur
; @@F@responses/@@ : objets réponses que le module peut fournir pour l'application entière
; @@F@locales/@@ : fichiers "properties", contenant les traductions pour les templates ou contrôleurs
; @@F@zones/@@ : classes gérant des parties de pages HTML
; @@F@daos/@@ : fichiers de mapping avec une base de données
; @@F@forms/@@ : fichiers déclarant les formulaires
; @@F@install/@@ : scripts d'installation et de mise à jour pour le module
; @@F@scripts/@@ : scripts à lancer en ligne de commandes
; @@F@plugins/@@ : plugins pour les divers composants de Jelix (jDb, jTpl...)
; @@F@www/@@ : images, CSS, fichiers Javascripts. Ces fichiers peuvent être
               utilisés par un navigateur, en appelant un contrôleur spécifique du module "jelix"
               (comme indiqué sur la page [[vues/vue-html#ajouter-des-feuilles-de-styles-fichiers-javascript-images|Générer une page HTML5]])
; @@F@tests/@@ : tests unitaires pour PHPUnit.

