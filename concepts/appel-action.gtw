~~LANG:EN@enman:core/call-action~~

===== URL : identification d'une action =====


Une fois que l'on a fait [[/controleurs|un contrôleur]] on veut bien sûr pouvoir
appeler l'une de ces méthodes, donc indiquer les informations nécessaires dans
les URLs.

À chaque URL correspond une action (module/contrôleur/méthode). Si cette
correspondance n'est pas explicitement faite dans la configuration (fichier urls.xml),
l'URL est composée des élements suivants :

<code>
   index.php/<monmodule>/<moncontroleur>/<mamethode>
</code>

Chacun des élements sont faculatifs. Les URLs suivantes sont valides :

<code>
   index.php/<monmodule>/<moncontroleur>
   index.php/<monmodule>
   index.php
</code>

  * Si le nom de la méthode n'est pas présente, par défaut il s'agira de la méthode
    @@M@index()@@ du contrôleur.
  * Si le nom du contrôleur est absent, il s'agira du contrôleur @@default@@
  * Si le nom du module est absent, Jelix éxecutera le module et l'action
    correspondant à "/", indiqué dans le fichier de configuation des URLs,
    var/config/urls.xml.

===== Sélecteurs d'action =====

Dans vos templates et dans votre code en général, vous n'indiquerez jamais d'URL
"en dur". Jelix comporte des mécanismes (la classe @@C@jUrl@@ notament) pour
générer les URLs correspondantes à des actions. Ceci permet de modifier
le "mapping" entre des URLs et des actions. Tout ceci sans toucher ni aux templates,
ni aux contrôleurs.

Aussi vous allez devoir la plupart du temps indiquer à divers objets ou méthodes
de l'API de Jelix des //sélecteurs d'action// accompagnés d'éventuels
paramètres. Voir la [[/concepts/selecteurs|page sur les sélecteurs]] pour en
savoir plus sur les sélecteurs en général.

Les sélecteurs d'action ont cette syntaxe :

<code>
   module~controleur:methode
</code>

Vous pouvez omettre l'une de ces parties comme spécifié précédemment :

<code>
   controleur:methode
   methode
   module~
   controleur:
</code>

Vous pouvez aussi indiquer le caractère "#" pour spécifier le module courant ou
l'action courante. Dans ces exemples, imaginons que c'est l'action "bar:man" du
module "foo" qui a été appelée dans Jelix :

  * "#~controleur:methode" représente l'action "controleur:methode" du module
    qui a été appelé. Équivaut donc à "foo~controleur:methode"
  * "module~#" représente l'action qui a été appelée mais du module indiqué.
    Équivaut donc à "module~bar:man"
  * "#~#" représente le module/l'action qui ont été appelés. Équivaut donc à
    "foo~bar:man".



===== Indiquer le point d'entrée =====

Par défaut quand on indique un sélecteur d'action, il génère l'URL avec le point
d'entrée courant : si on a appelé Jelix avec index.php, ce sera index.php, si
c'est xmlrpc.php, ce sera xmlrpc.php. 

Cependant on peut vouloir indiquer des URLs pour d'autres points d'entrées. Par
exemple, on est dans une action qui affiche une page html et on veut indiquer
dans la page l'URL du point d'entrée pour les services web jsonrpc.

Dans ce cas on ajoute à la fin du sélecteur d'action, un "@" suivi du nom du
type du point d'entrée :

<code>
  foo~bar:man@css
</code>

Ici on demande l'URL de l'action "bar:man" du module "foo", pour les requêtes de
type "css".

Pour la plupart des URLs on indiquera certainement "@classic".

Si dans un sélecteur d'action on indique juste le type de requête, seront
utilisés le module et l'action indiqués pour l'URL "/" dans la configuration
de l'application. Ainsi par exemple le sélecteur
"@classic" correspondra à l'URL "index.php".

Pour en savoir plus : [[/urls|configuration et la manipulation des URLs dans Jelix]].

