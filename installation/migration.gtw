~~LANG:EN@enman:installation/migrate~~

Lors d'une migration d'une version Jelix à une autre, il y a toujours au moins
ces étapes à faire :

  * Récupérer les sources de la nouvelle version de Jelix et les installer.
    Depuis Jelix 1.7, la procédure standard est de changer la version de Jelix
    dans le fichier composer.json, ou de créer un fichier composer.json si vous
    migrez vers Jelix 1.7.
  * **supprimer** tous les fichiers dans le répertoire @@F@votre_appli/temp/@@
  * adapter votre code en suivant les instructions indiquées pour chaque
    ancienne version de Jelix. Voir ci-dessous.
  * lancer l'installateur de Jelix.

===== Mettre à jour depuis Jelix 1.5 et inférieur, jusqu'à Jelix 1.6 =====

Suivez les indications de migration de chaque version intermédiaire, avant de
mettre à jour pour jelix 1.7. Voir les instructions de migration des manuels
de chacune de ces versions. Vous devrez en particulier remplacer le répertoire
lib/ de Jelix.

===== Mettre à jour depuis Jelix 1.6.x =====

Voici les instructions à suivre dans l'ordre.

==== Prérequis ====

Jelix 1.7 nécessite PHP 5.6 minimum. Vérifiez que votre serveur a bien cette
version.

==== Sauvegarde ====

Tout d'abord, faites une sauvegarde de votre base de données, de vos fichiers de
configuration etc.

==== Répertoires temporaires ====

Comme d'habitude, vous devez vider le contenu de votre répertoire
@@F@temp/votreapp/@@. Notez que depuis Jelix 1.7, le répertoire temporaire d'une
application est par défaut dans le répertoire de l'application, et non
plus en dehors. Mais vous pouvez le garder hors de l'application.

==== Installation des fichiers de Jelix ====

Depuis la version 1.7, Jelix peut s'installer avec Composer. Composer est un
gestionnaire de paquet, utilisable en ligne de commande, qui est maintenant
très utilisé dans de nombreux projets.

De plus certains modules "standards" ne sont plus inclus directement dans
les sources de Jelix, mais désormais installables via Composer.

Cependant, il est encore possible de télécharger les sources de Jelix et
de l'installer à la main. L'archive contient déjà toutes les dépendances
aux paquets Composer utilsés par Jelix.

Pour la migration, vous pouvez donc mettre à jour, soit via Composer, soit
en téléchargeant l'archive comme pour les versions précédentes.

=== Vous voulez utiliser Composer ===

Installez Composer en suivant [[https://getcomposer.org|les instructions de son manuel]].

Dans le répertoire de votre application, créer un fichier @@F@composer.json@@.
Celui-ci doit indiquer le paquet @@jelix/jelix@@ comme dépendance dans la
section @@require@@, avec la version voulue (pour le moment il n'y a pas de
version stable disponible, indiquez donc "dev-jelix-1.7").

Exemple :

<code>
{
    "name": "mycompany/myapp",
    "type": "application",
    "require": {
        "jelix/jelix": "dev-jelix-1.7.x"
    }
}
</code>

Vous devez remplacer @@"mycompany/myapp"@@ par un identifiant propre à votre
projet. Un fichier @@F@composer.json@@ peut contenir bien d'autres informations.
Voir le manuel de Composer.

Supprimez le contenu du répertoire lib, sauf bien sûr les bibliothèques non
fournies par Jelix, si vous en aviez ajouté dans ce répertoire.

Executez ensuite en ligne de commande :

<code bash>
composer install
</code>

Vous verrez alors un nouveau répertoire @@F@vendor/@@ et un fichier composer.lock.
Il n'est pas recommandé d'inclure le répertoire @@F@vendor/@@ dans votre gestionnaire
de version (git, subversion...). Donc indiquez-le dans un fichier @@F@.gitignore@@,
@@F@.hgignore@@ ou une propriété @@snv:ignore@@, selon l'outils de gestion de version
que vous utilisez.

Dans le fichier @@F@application.init.php@@, vous devez ensuite remplacer :

<code php>
require (__DIR__.'/../lib/jelix/init.php');
</code>

par

<code php>
require (__DIR__.'/vendor/autoload.php');
require (__DIR__.'/vendor/jelix_app_path.php');
</code>


=== Vous ne voulez pas utiliser Composer ===

Téléchargez le paquet jelix sur le site de téléchargement de jelix.org, comme
vous avez l'habitude de faire.

Remplacez le répertoire @@F@lib/@@ de jelix par celui contenu dans le paquet
jelix, en n'oubliant pas de remettre dans le nouveau répertoire @@F@lib/@@ vos
éventuelles bibliothèques personnelles si vous en aviez mis dans l'ancien.

Dans le fichier @@F@application.init.php@@, vous devez ensuite remplacer :

<code php>
require (__DIR__.'/../lib/jelix/init.php');
</code>

par

<code php>
require (__DIR__.'/../lib/vendor/autoload.php');
require (__DIR__.'/../lib/vendor/jelix_app_path.php');
</code>


==== Changement de la déclaration des modules et plugins ====

Dans les versions précédentes de Jelix, il fallait déclarer les répertoires
contenant des modules ou de plugins, dans des paramètres @@modulesPath@@ ou
@@pluginsPath@@ de la configuration (indiqués dans @@mainconfig.ini.php@@
ou le fichier de configuration du point d'entrée).

Ces paramètres ne sont plus reconnus. Les répertoires de modules et de plugins
doivent maintenant être déclarés dans le fichier @@F@application.init.php@@ ou
le fichier @@composer.json@@ si vous utilisez Composer.

Supprimez donc ces paramètres des fichiers de configuration.

=== Déclarer les modules et plugins dans @@F@application.init.php@@ ===

Dans le fichier @@F@application.init.php@@, vous devez appeler
@@jApp::declareModulesDir@@ et/ou @@jApp::declarePluginsDir@@, avec la liste
des repertoires.

<code php>
jApp::declareModulesDir(array(
                        __DIR__.'/modules/'
                    ));
jApp::declarePluginsDir(array(
                        __DIR__.'/plugins'
                    ));
</code>

Dans cet exemple, les répertoires @@modules/@@ et @@plugins/@@ de l'application sont
déclarés. Notez que les répertoires @@jelix-modules@@, @@jelix-admin-modules@@ et
@@jelix-plugins@@ fournis avec Jelix sont déclarés automatiquement (via l'inclusion du
fichier @@F@vendor/jelix_app_path.php@@).


=== Déclarer les modules et plugins dans composer.json ===

Si vous installez Jelix avec Composer, les répertoires de modules et de plugins
peuvent être déclarés directement dans le fichier @@F@composer.json@@ au lieu
du fichier @@application.init.php@@, comme ceci:

<code json>
{
   ...
    "extra" : {
        "jelix": {
            "modules-dir" : [
                "modules/",
            ],
            "plugins-dir" : [
                "plugins/",
            ]
        }
    }
}
</code>

N'oubliez pas de faire un @@composer update@@ à chaque fois que vous modifiez
le fichier @@F@composer.json@@.

==== À propos de Simpletest ====

Simpletest (et le module junittests) n'est plus fourni avec Jelix. Si vous
n'avez pas migré vos tests vers PHPUnit, vous pouvez encore installer
[[https://github.com/jelix/simpletest-module|le module junittests]] en le
téléchargeant ou en le déclarant ("jelix/simpletest-module") dans votre fichier
composer.json.

==== Changements dans profiles.ini.php ====

Les drivers jDb "sqlite" et "mysql" ne sont plus fournis (le premier utilisant
une API PHP pour le vieux sqlite 2, et le deuxième utilisant l'API php
mysql qui est dépréciée). Utilisez donc à la place respectivement "sqlite3" et
"mysqli".

Pour mysqli, c'est modifié automatiquement par le script de migration
de Jelix.

Mais pour sqlite3, il faut le faire à la main. Attention : pour passer de
sqlite 2 à sqlite 3, il faut d'abord convertir votre base au format sqlite3
(en ayant donc installé sqlite 2 et sqlite 3 sur votre système),
par exemple en tapant dans votre console : @@sqlite OLD.db .dump | sqlite3 NEW.db@@.

Une alternative est d'installer les drivers sqlite et mysql séparément,
[[https://github.com/jelix/legacy-db-plugins|en les téléchargeant]] ou en
déclarant le paquet "jelix/legacy-db-plugins" dans votre fichier
@@composer.json@@. Et en installant l'extension PECL de sqlite 2 et la vieille
extension de mysql.

==== Changements dans les urls ====

Il n'y a plus le choix dans le moteur d'URL. Il s'agit maintenant uniquement
du moteur anciennement nommé "significant" et amélioré pour prendre en charge
les urls de "basic_significant". Les paramètres "module" et
"action" des urls ne sont plus pris en charge. Si vous avez des urls en dur
dans votre code (contrôleurs, configurations ou templates par exemple) qui
contiennent ces paramètres (parce que vous utilisiez le moteur "simple"),
changez-les sous la forme @@/module/controleur/method@@.

Exemple : @@/index.php?module=foo&action=ctrl:act@@ devient
@@/index.php/foo/ctrl/act@@.

Si ces urls ne fonctionnent pas après la migration, vérifiez que votre serveur
web est bien configuré pour prendre en charge le "pathinfo".

==== Utilisation du script cmd.php ====

Les commandes de cmd.php ont été réimplémentée en utilisant le composant Symfony Console.
De ce fait, tous les paramètres et options ont changé.

Si vous utilisez ces commandes dans des scripts, cron ou autre, il vous faut changer les
paramètres, en particulier le nom de la commande. Faire un @@php cmd.php help@@
pour avoir l'aide.

De plus le script createapp.php a été déplacé dans un répertoire bin, et disponible
dans @@vendor/bin@@ de votre application si vous installez Jelix avec Composer.

==== Vos scripts utilisant jCmdLineRequest ====

Si le script est dédié à une action particulière, il ne faut plus seulement
indiquer @@true@@ au constructeur de jCmdLineRequest, mais aussi le module
et l'action. Vous y mettrez donc les valeurs des paramètres de configuration
@@startModule@@ et @@startAction@@ du script. Ces derniers ne sont en effet
plus utilisés.

==== Plugins custom pour jDb et jDao ====

Les classes @@*daobuilder*@@ des plugins de jDb ne sont plus pris en charge. Si
vous aviez fait votre propre plugin pour jDb, il faut migrer la classe de type
daobuilder vers un plugin spécifique pour jDao. Voir la doc de jDao.

==== Session et cookie ====

Les données des instances des formulaires ne sont plus stockés en session, mais
dans un cache géré par jCache. Il faut donc savoir que certains de vos
utilisateurs qui utilisaient des formulaires au moment de la migration de votre
application perdront donc les données de leurs formulaires (si elles n'ont pas
été sauvées par ailleurs).

Idem pour la persistance de l'authentification : la clé de chiffrement de cookie
étant changée, les utilisateurs devront obligatoirement se ré-authentifier si
ils avaient choisie d'être "reconnu" par votre application.

==== Changements dans les scripts d'installation de vos modules ====

Étant donné les changements dans l'organisation des fichiers de configuration,
et afin de faire une meilleure distinction au niveau des API, entre ce qui concerne
l'application en général, et ce qui concerne un point d'entrée, des nouvelles
classes @@jInstallerModuleé@@ et @@jInstallerEntryPoint2@@ ont fait leur apparition.

Bien que cela ne soit pas obligatoire pour Jelix 1.7 (mais cela le deviendra
pour les futures versions, @@jInstallerModule@@ disparaitra), vous devriez
modifier vos scripts d'installation et de mise à jour en utilisant la classe
@@jInstallerModule2@@.

La principale différence réside en un renommage des méthodes @@install()@@,
@@preInstall()@@ etc, en @@installEntryPoint()@@, @@preInstallEntryPoint()@@
etc. Ces nouvelles méthodes acceptent en paramètre un objet @@jInstallerEntryPoint2@@.
Vous avec donc depuis ces nouvelles méthodes, accés à des fonctions qui sont
soit liées à un point d'entrée (sur cet objet  @@jInstallerEntryPoint2@@), soit
liées à l'application en général (sur @@jInstallerModule2@@).

==== Déplacement des fichiers overloads, themes... ====

Il faut déplacer les contenus qui ne sont pas dynamiques (donc ceux d'origine, pas
ceux créés par l'application) de var/overloads,
var/themes/ et var/locales vers app/overloads, app/themes/ et app/locales/.

Ce n'est pas fait automatiquement par le script de migration, car il ne serait
pas possible pour lui de déterminer ce qui est statique ou dynamique.

==== Disparition de json.js et json2.js ====

Si vos scripts javascript utilisaient la fonction @@toJSONString()@@ ou @@parseJSON()@@,
il faut remplacer ces appels par l'utilisation de l'objet JSON standard en
javascript.

Il faut aussi retirer tout chargement des scripts jelix/js/json.js, jelix/js/json2.js
et jelix/xul/jsonrpc.js.

==== Mise à jour des modules ====  

Mettez à jour les sources des modules tiers que vous avez installés, et qui sont
compatibles avec Jelix 1.7.

Et pour vos propres modules, vous devez adapter le code source en faisant les
modifications suivantes :

  * Dans les fichiers @@F@module.xml@@, indiquez que le module est compatible
    avec Jelix 1.7 (changer l'attribut @@A@maxversion@@). Exemple :

<code xml>
        <jelix minversion="1.5" maxversion="1.7.*"/>
</code>

Certaines classes, certains modules et plugins sont maintenant livrés séparément, soit
installable avec Composer, soit via un zip. Si vous les utilisiez, il faudra donc les
récupérer en plus de Jelix. Il s'agit de :

  * Le module jtcpdf : [[https://packagist.org/packages/jelix/tcpdf-module|jelix/tcpdf-module]].
  * Le plugin Minify pour les réponses HTML (maintenant dans un module) : [[https://packagist.org/packages/jelix/minify-module|jelix/minify-module]].
  * Le plugin redis pour jKVDb et jCache : [[https://packagist.org/packages/jelix/php-redis-plugin|jelix/php-redis-plugin]].
  * Le module jsitemap : [[https://packagist.org/packages/jelix/sitemap-module|jelix/sitemap-module]], contenant
    l'objet réponse pour générer un sitemap.
  * la classe jHttp : [[https://packagist.org/packages/jelix/jhttp|jelix/jhttp]]. Il est
    préconisé d'utiliser d'autres composants plus modernes
    comme [[https://packagist.org/packages/guzzlehttp/guzzle|GuzzleHttp]].

==== Changements d'API ====

Lisez [[/nouveautes|la liste détaillée des changements]] pour savoir la liste des nouvelles
classes et méthodes que vous pouvez utiliser.

Il y a eu aussi des changements dans certaines API, que vous devriez donc
modifier dans votre code si vous les utilisez :

  * @@jQueryPath@@ dans la configuration est obsolète. Préférez l'utilisation des webassets.

  * si vous traitez des requêtes avec du contenu JSON (type application/json)
    le JSON est maintenant automatiquement désérialisé avec json_decode. Vous
    devez donc changer vos contrôleurs pour ne plus faire vous même la
    déserialisation.

  * jDb : si vous utilisiez bindValue() et bindParam() (mais il y a peu de chance,
    vu que cela ne fonctionnait pas très bien) il faut modifier ces appels, en
    utilisant les bons arguments.

  * **NODOC** jDao : l'attribut "driver" sur les balises de conditions est déprécié et remplacé par un attribut "dbtype"

Des fonctionnalités, API et modules ont été supprimés. Voir la liste
complète dane [[/nouveautes|les nouveautés]]. Veillez donc à modifier votre
code pour ne plus les utiliser et éventuellement les remplacer par des
alternatives.


==== Mise à jour de Jelix ====

Après toutes les modifications effectuées, vous devez lancer le script
installer.php de votre application. Le module jelix fera le reste des
modifications.

En particulier :

  * Migration de la configuration des moteurs d'url "simple" et "basic_significant"
    vers le fichier urls.xml
  * Migration des paramètres startModule et startAction vers urls.xml
  * Suppression des paramètres et section obsolètes liés au moteur d'url
  * **Déplacement du répertoire responses/** vers app/responses
  * **Déplacement des fichiers de configuration** suivants vers app/config :
     * mainconfig.ini.php, urls.xml, preferences.ini.php
     * ceux des points d'entrées
     * fichiers de configuration des plugins du coordinateur
     * fichier de classmap pour soap
  * migration de @@persistant_crypt_key@@ vers @@persistant_encryption_key@@
  * migration de la declaration des assets des widgets wikieditor et htmleditor
    vers le nouveau système d'assets



