~~LANG:EN@enman:installation/migrate~~

Lors d'une migration d'une version Jelix à une autre, il y a toujours au moins
ces étapes à faire :

  * Remplacer le répertoire @@F@lib/@@ de jelix par celui contenu dans le paquet
    jelix.
  * Ne pas oublier de remettre dans le nouveau répertoire @@F@lib/@@ vos
    éventuelles bibliothèques personnelles si vous en aviez mis dans l'ancien.
  * **supprimer** tous les fichiers dans le répertoire @@F@temp/votre_appli@@
  * adapter votre code en suivant les instructions indiquées pour chaque
    ancienne version de Jelix. Voir ci-dessous.

===== Mettre à jour depuis Jelix 1.3 et inférieur =====

Suivez les indications de migration de chaque version intermédiaire (voir les
manuels correspondant), avant de mettre à jour pour jelix 1.4.

===== Mettre à jour depuis Jelix 1.4 =====

Voici les instructions à suivre dans l'ordre.

==== Sauvegarde ====

Tout d'abord, faites une sauvegarde de votre base de données, de vos fichiers de configuration etc.

==== Répertoires temporaires ====

Comme d'habitude, vous devez vider le contenu de votre répertoire @@F@temp/votreapp/@@.

==== Suppression de fichiers ====


==== Modifications générales ====


==== Support de PDF avec TCPDF ====

TCPDF, ses fontes, l'objet réponse @@C@jResponseTcpdf@@ et la classe
@@C@jTcpdf@@ ont été intégré dans un module séparé. Si votre application utilise
ces objets, il faut installer ce nouveau module jtcpdf, disponible en
téléchargement. Il n'y a en principe rien à faire d'autre, sauf à changer les
chemins d'inclusions si vous avez fait des classes héritant de
@@C@jResponseTcpdf@@.

==== Support de SOAP ====

Si vous utilisez les fonctionnalités SOAP de Jelix (points d'entrée, jWSDL...),
vous devez faire les changements suivants :

  * Dans la configuration, vous devez enlever l'activation du module jWSDL
    puisqu'il n'existe plus, et activer le module jsoap:
 
<code ini>
   [modules]
   jWSDL.access=2  ; <- enlever cette ligne
   jsoap.access=2 ; <- ajouter cette ligne
</code>

  * Dans votre soap.php (ou autre points d'entrées pour soap), vous devez changer
    leur contenu comme ceci:

<code php>
require_once ('../application.init.php');

checkAppOpened();

jApp::loadConfig('soap/config.ini');
ini_set("soap.wsdl_cache_enabled", "0");

jClasses::inc('jsoap~jSoapCoordinator');
jClasses::inc('jsoap~jSoapRequest');

$jelix = new jSoapCoordinator();
jApp::setCoord($jelix);
$jelix->request = new jSoapRequest();
$jelix->request->initService();
$jelix->processSoap();
</code>

   * Si vous générez des liens pour jWSDL, changez dans les selecteurs les noms
   de module "jWSDL" en "soap".
   * Reconfigurez tout vos clients soap qui interroge votre application, pour
     changer l'url du WSDL


==== Mise à jour des modules ====

Mettez à jour les sources des modules tiers que vous avez installés, et qui sont compatibles avec Jelix 1.5.

Et pour vos propres modules, vous devez adapter le code source en faisant les modifications suivantes :

  * Rien pour le moment
  * Dans les fichiers @@F@module.xml@@, indiquez que le module est compatible avec Jelix 1.5 (changer l'attribut @@A@maxversion@@). Exemple :

<code xml>
        <jelix minversion="1.4" maxversion="1.5.*"/>
</code>


Nouvelles API que vous pouvez utiliser (non exhaustives) :
   * TODO

API que vous ne pouvez plus utiliser :
   * TODO

==== Mise à jour de Jelix ====

Après toutes les modifications effectuées, vous devez lancer le script
installer.php de votre application. Le module jelix fera le reste des
modifications, en particulier :

  * Rien pour le moment
