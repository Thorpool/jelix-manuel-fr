~~LANG:EN@enman:web-services/json~~

[[http://fr.wikipedia.org/wiki/JSON|JSON]] est un format de données qui
réutilise des éléments syntaxiques de Javascript. Cela facilite alors grandement
l'utilisation de contenu en JSON dans une page HTML. 

Pour envoyer un contenu en JSON au navigateur, vous pouvez employer la réponse
@@C@jResponseJson@@ dont l'alias est "json". Vous n'avez ensuite qu'à mettre
n'importe quelles données dans la propriété @@P@$data@@.

<code php>
  $rep = $this->getResponse('json');
  $rep->data = array( 'nom'=>'dupont', 'prenom'=>'jean');
  return $rep;
</code>

L'appel du côté client, se fait de la même façon que la technique AJAX :

<code javascript>
   http = new XMLHttpRequest();

   // url est une variable qui contient l'url correspondante à l'action ajax
   http.open("post", url, true);

   http.onreadystatechange = function(){
	    if(http.readyState == 4){
	    // récupération du contenu renvoyé par votre action
            var json = http.responseText;
            var value;
 
            // solution la moins propre pour transformer le json en objet JS
            //value = eval('(' + json + ')');
 
            // solution la plus propre, dans les navigateurs modernes comme Firefox 3.5
            value = JSON.parse(json);
 
            // ici traitement des données.
	    }
   };

   // la requête http est envoyée
   http.send(null);
</code>

Avec jQuery, c'est plus simple :

<code javascript>
   $.getJSON( url, function (json) {
      // ici traitement de la réponse
   }
</code>

Avec notre exemple, vous recevrez côté client, ceci :

<code javascript>
  "{ nom:'dupont', 'prenom':'jean'}"
</code>

Ce qui peut donner, avec jQuery :

<code javascript>
   $.getJSON( url, function (json) {
      alert(json.lastname + ' ' + json.firstname);
   }
</code>



=== Exemple d'utilisation avec une DAO ===

<code php>
$countryDao = jDao::get('common~country');
$countries = $countryDao->findAll();
$response = $this->getResponse('json');
$response->data = array();
foreach($countries as $country) {
	$response->data[] = array('id' => $country->id , 'name' => $country->name);
}
</code>

On récupère côté client des objets en notation JSON comme celui-ci :

<code javascript>
   { "id":20, "name":"Europe"}
</code>
