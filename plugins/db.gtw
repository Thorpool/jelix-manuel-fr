~~LANG:EN@enman:plugins/db~~

jDb, la couche d'abstraction d'accès aux bases de données, a un système de
plugin, ou "drivers". Un driver permet d'accéder à un type de base de données
spécifique.

===== Activation =====

Pour savoir comment activer un driver pour jDb, voyez le [[/composants/base-de-donnees|chapitre sur jDb]].

===== Création d'un driver =====

Un driver pour jDb est constitué de plusieurs classes :

   * une classe pour la connexion à la base de données et l'exécution des
     requêtes, héritant de @@C@jDbConnection@@
   * une classe pour récupérer les résultats, héritant de @@C@jDbResultSet@@
   * des classes pour interroger et modifier le schéma d'une base de donnée.
     Elles héritent de @@C@jDbSchema@@ et @@C@jDbTable@@.

==== Fichiers et nommages ====

Un driver possède un nom identifiant. Prenons le nom "exemple" pour la suite.

Les fichiers du driver doivent se trouver dans un répertoire @@F@db/exemple/@@
dans un dépôt de plugins.

Les noms des fichiers doivent suivre ce nommage :

   * @@F@exemple.dbconnection.php@@ pour la classe de connexion
   * @@F@exemple.dbresultset.php@@ pour la classe de resultset
   * @@F@exemple.dbschema.php@@ pour les classes de manipulation de schemas

Et dans chacun de ces fichiers, les classes doivent respectivement avoir le
nommage suivant :

   * @@C@exempleDbConnection@@
   * @@C@exempleDbResultSet@@
   * @@C@exempleDbSchema@@ et @@C@exempleTableSchema@@

==== Classe de connexion ====

Elle doit hériter de @@C@jDbConnection@@ qui contient quelques méthodes
abstraites qu'il faut définir. Son rôle est de se connecter/déconnecter à la
base de donnée. Elle est chargée aussi d'initier les transactions et de les
confirmer ou annuler. Enfin, elle exécute ou prépare les requêtes, en renvoyant
un objet résultat.

Pour ce faire, elle doit redéfinir les méthodes suivantes :

   * le constructeur s'il y a besoin de faire des choses à l'instanciation du
     driver. Typiquement, vérifier que les fonctions PHP nécessaires sont bien
     là.
   * @@M@_connect()@@ et @@M@_disconnect()@@, pour la connexion et la
     déconnexion à la base de données
   * @@M@_quote@@, pour échapper une chaîne de caractère avant que celle-ci soit
     utilisée dans une requête
   * @@M@_doQuery@@ et @@M@_doLimitQuery@@, pour lancer des requêtes qui
     ramènent des enregistrements (SELECT ou procédures stockées). Elles doivent
     renvoyer un objet @@C@exempleDbResultSet@@ ou false si la requête a échoué
   * @@M@_doExec@@, pour lancer des requêtes ne renvoyant pas d'enregistrements
     (UPDATE, DELETE, INSERT...). Doit renvoyer le nombre d'enregistrements
     affectés, ou false si la requête a échoué
   * la méthode @@M@prepare()@@, pour préparer les requêtes.
   * @@M@beginTransaction()@@, @@M@commit()@@, @@M@rollback()@@, pour les
     transactions
   * @@M@errorInfo()@@ et @@M@errorCode()@@ renvoyant l'intitulé et le code de
     la dernière erreur
   * @@M@lastInsertId()@@, permettant de récupérer la dernière valeur du dernier
     id autoincrémenté généré.
   * @@M@_autoCommitNotify()@@


Si le driver ne prend pas en charge certaines fonctionnalités, il doit générer
une exception.

Voir [[refclass:jDbConnection|la référence de jDbConnection]] pour plus de détails.

==== Classe de résultat ====

Elle doit hériter de @@C@jDbResultSet@@ qui contient quelques méthodes
abstraites qu'il faut définir. Un objet de cette classe est normalement renvoyé
par les méthodes @@M@prepare@@, @@M@_doQuery@@, @@M@_doLimitQuery@@ et @@M@prepare()@@ 
de la classe @@C@exempleDbConnection@@.

Vous devez notament redéfinir les méthodes suivantes :

   * @@M@_fetch()@@, qui doit récupérer l'enregistrement suivant dans la liste
     des résultats. Elle doit tenir compte de la propriété @@P@_fetchMode@@.
     Dans la propriété @@P@_idResult@@, vous trouverez l'identifiant de la
     ressource liée aux résultats.
   * @@M@_free()@@, pour libérer la ressource liée aux résultats
     (@@P@_idResult@@)
   * @@M@_rewind()@@, pour revenir au début des résultats
   * @@M@rowCount@@, pour retourner le nombre de résultats
   * @@M@bindColumn@@, @@M@bindParam@@, @@M@bindValue@@, @@M@columnCount@@ et
     @@M@execute@@ pour les requêtes préparées.


Voir [[refclass:jDbResultSet|la référence de jDbResultSet]] pour plus de détails.

==== Classe pour le schema ====

Une classe héritant de jDbSchema doit permettre de récupérer la liste des tables
et leurs propriétés, champs... Voir l'API de jDbSchema.

==== Exemples ====

Voir les drivers pour mysql, postgresql etc dans le répertoire
@@F@lib/jelix/plugins/db/@@.
